using System.Text;
using System.Xml;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

/// <inheritdoc />
[Generator]
public class ReQuestyVersionGenerator : IIncrementalGenerator
{
    /// <inheritdoc />
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterSourceOutput(context.CompilationProvider, (spc, compilation) =>
        {
            string directory = Path.GetDirectoryName(compilation.SyntaxTrees.First().FilePath);
            XmlDocument csproj = new();
            string csprojPath = Path.GetFullPath(Path.Combine(directory, "..", "ReQuesty", "ReQuesty.csproj"));

            try
            {
                csproj.Load(csprojPath);

                string version = csproj.GetElementsByTagName("Version")[0].InnerText;
                string majorVersion = $"{Version.Parse(version).Major}.0.0";

                string source = $@"// <auto-generated/>
namespace ReQuesty.Generated;

/// <summary>
///   The version class
/// </summary>
public static class ReQuestyVersion
{{
    /// <summary>
    ///   The current version string
    /// </summary>
    public static string Current()
    {{
        return ""{version}"";
    }}

    /// <summary>
    ///   The current major version string
    /// </summary>
    public static string CurrentMajor()
    {{
        return ""{majorVersion}"";
    }}
}}
";
                // Add the source code to the compilation
                spc.AddSource($"ReQuestyVersion.g.cs", SourceText.From(source, Encoding.UTF8));
            }
            catch (Exception e)
            {
                throw new FileNotFoundException($"ReQuestyVersionGenerator expanded in an invalid project, missing '{csprojPath}' file.", e);
            }
        });
    }
}
